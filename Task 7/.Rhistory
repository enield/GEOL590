EWR_month<-spread(EWR,key=month)
EWR_month<-spread(EWR,key=month, n=count)
EWR_month<-spread(EWR,key=month, count)
EWR_month<-spread(EWR,key=month, n)
View(EWR_month)
head(babynames)
?babynames
library(babynames)
head(babynames)
top10 <- babynames %>%
filter(year==2014)%>% #isolate baby names from 2014
group_by(sex)%>% #group by sex to get top 10 in this format
arrange(desc(n))
top10
top_n?
?
e3=
?topn
?top_n
top10 <- babynames %>%
filter(year==2014)%>% #isolate baby names from 2014
group_by(sex)%>% #group by sex to get top 10 in this format
top_n(10)
top10 <- babynames %>%
filter(year==2014)%>% #isolate baby names from 2014
group_by(sex)%>% #group by sex to get top 10 in this format
top_n(10,n)
View(top10)
top10 <- babynames %>%
filter(year==2014)%>% #isolate baby names from 2014
group_by(sex)%>% #group by sex to get top 10 in this format
selct(-prop)
top_n(10,n) #select the top 10 values in the count colmn, n
top10 <- babynames %>%
filter(year==2014)%>% #isolate baby names from 2014
group_by(sex)%>% #group by sex to get top 10 in this format
selct(-prop) %>%
top_n(10,n) #select the top 10 values in the count colmn, n
top10 <- babynames %>%
filter(year==2014)%>% #isolate baby names from 2014
group_by(sex)%>% #group by sex to get top 10 in this format
select(-prop) %>%
top_n(10,n) #select the top 10 values in the count colmn, n
View(top10)
top10_time<-top10%>%
left_join(babynames, by="name")
View(top10_time)
top10 <- babynames %>%
filter(year==2014)%>% #isolate baby names from 2014
group_by(sex)%>% #group by sex to get top 10 in this format
top_n(10,n) %>%#select the top 10 values in the count colmn, n
select(name) %>% #only intrested in the name, will keep only one col, it will make it easier for the next step below
top10 <- babynames %>%
filter(year==2014)%>% #isolate baby names from 2014
group_by(sex)%>% #group by sex to get top 10 in this format
top_n(10,n) %>%#select the top 10 values in the count colmn, n
select(name)
top10 <- babynames %>%
filter(year==2014)%>% #isolate baby names from 2014
group_by(sex)%>% #group by sex to get top 10 in this format
top_n(10,n) %>%#select the top 10 values in the count colmn, n
select(name)
View(top10)
top10 <- babynames %>%
filter(year==2014)%>% #isolate baby names from 2014
group_by(sex)%>% #group by sex to get top 10 in this format
top_n(10,n) %>%#select the top 10 values in the count colmn, n
select(name,sex)
top10_time<-top10%>%
left_join(babynames, by="name")
View(top10_time)
top10_time<-top10%>%
left_join(babynames, by="name", na.rm=TRUE)
View(top10_time)
top10 <- babynames %>%
filter(year==2014)%>% #isolate baby names from 2014
group_by(sex)%>% #group by sex to get top 10 in this format
top_n(10,n) %>%#select the top 10 values in the count colmn, n
select(name)
top10<-top10%>% select(name)
View(top10_time)
?filter
top10_mf<-top10%>%
left_join(babynames, by="name")%>%
filter(sex.x==sex.y)
top10_mf<-top10%>%
left_join(babynames, by="name")%>%
filter("sex.x"=="sex.y"")
top10_mf<-top10%>%
left_join(babynames, by="name")%>%
filter("sex.x"=="sex.y")
top10_mf<-top10%>%
left_join(babynames, by="name")%>%
filter("sex.x"=="sex.y")
top10_all<-top10%>%
left_join(babynames, by="name", na.rm=TRUE)
rename(top10_all, c("sex.x"="sexx", "sex.y"="sexy"))
rename(top10_all, sex.x = sex1)
rename(top10_all, sex1 = sex.x)
top10 <- babynames %>%
filter(year==2014)%>% #isolate baby names from 2014
group_by(sex)%>% #group by sex to get top 10 in this format
top_n(10,n) %>%#select the top 10 values in the count colmn, n
rename(sex2 = sex)%>% #renamind sex column becuase it will make it easier to join in next step
select(name,sex2)  #only intrested in the name and sex, will keep only one col, it will make it easier for the next step below
top10_all<-top10%>%
left_join(babynames, by="name", na.rm=TRUE)
View(top10_time)
View(top10_all)
top10_mf<-top10%>%
left_join(babynames, by="name")%>%
filter(sex2==sex)
View(top10_mf)
View(top10_mf)
Female_name<-ggplot(top10_mf, aes(x=year,y=n, fill="name"))+ggscatter()+ylab("Frequency of Names")
Female_name<-ggplot(top10_mf, aes(x=year,y=n, fill="name"))+ggpoint()+ylab("Frequency of Names")
Female_name<-ggplot(top10_mf, aes(x=year,y=n, fill="name"))+geom_point()+ylab("Frequency of Names")
print(Female_name)
Female_name<-ggplot(top10_mf, aes(x=year,y=n))+geom_point()+ylab("Frequency of Names")+facet(~name)
print(Female_name)
Female_name<-ggplot(top10_mf, aes(x=year,y=n))+geom_point()+ylab("Frequency of Names")+facet_wrap(~name)
print(Female_name)
name_plot<-ggplot(top10_mf, aes(x=year,y=n, fill="sex"))+geom_point()+ylab("Frequency of Names")+facet_wrap(~name)
print(name_plot)
name_plot<-ggplot(top10_mf, aes(x=year,y=n, colours="sex"))+geom_point()+ylab("Frequency of Names")+facet_wrap(~name)
print(name_plot)
name_plot<-ggplot(top10_mf, aes(x=year,y=n, colour="sex"))+geom_point()+ylab("Frequency of Names")+facet_wrap(~name)
print(name_plot)
name_plot<-ggplot(top10_mf, aes(x=year,y=n, colour=sex))+geom_point()+ylab("Frequency of Names")+facet_wrap(~name)
print(name_plot)
girl_names<-babynames%>%
filter(sex=F|year==1896|year==1942|year==2016)
girl_names<-babynames%>%
filter(sex==F|year==1896|year==1942|year==2016)
View(girl_names)
?top_n
girl_names<-babynames%>%
filter(sex==F|year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
arrange(desc(n))
View(girl_names)
girl_names<-babynames%>%
filter(sex==F, year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
arrange(desc(n))
View(girl_names)
girl_names<-babynames%>%
filter( year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
arrange(desc(n))
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
arrange(desc(n))
View(girl_names)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
arrange(desc(n))%>% #sort by most pupular
mutate(rank=n=n())
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
arrange(desc(n))%>% #sort by most pupular
mutate(rank=n())
View(girl_names)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
arrange(desc(n))%>% #sort by most pupular
mutate(rank=n(name))
View(girl_names)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>% #create a group for each year
arrange(desc(n))
View(girl_names)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)
View(girl_names)
?summarize
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>%
tally(name, wt, sort = FALSE)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>%
tally(name, sort = FALSE)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>%
tally("name", sort = FALSE)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>%
n("name", sort = FALSE)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>%
n(,"name", sort = FALSE)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>%
n(prop,"name", sort = FALSE)
?rank
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>%
rank(n)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>%
rank(n,ties.method= "max")
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>%
xtfrm(n)
?transform
View(girl_names)
?arrange
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>%
mutate(rank = dense_rank(desc(n)))
View(girl_names)
?dense_rank
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter(26<rank<29)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter(26<rank|rank<29)
View(girl_names)
girl_names<-babynames%>%
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter(sex=="F", year==1896|year==1942|year==2016, 26<rank|rank<29)
View(girl_names)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter(26<rank|rank<29)
View(girl_names)
girl_names<-babynames%>%
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter(sex=="F", year==1896|year==1942|year==2016, 26<rank|rank<29)%>% #filter the rows for all female names and for the specified years
filter(26<rank<29)
girl_names<-babynames%>%
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter(sex=="F", year==1896|year==1942|year==2016, 26<rank|rank<29)%>% #filter the rows for all female names and for the specified years
filter(26<rank&rank<29)
View(girl_names)
girl_names<-babynames%>%
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter(sex=="F", year==1896|year==1942|year==2016, 26<rank|rank<29)%>% #filter the rows for all female names and for the specified years
filter(25<rank&rank<30)
View(girl_names)
girl_names<-babynames%>%
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter(sex=="F", year==1896|year==1942|year==2016, 25<rank&rank<30)
View(girl_names)
girl_names<-babynames%>%
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter(sex=="F", year==1896|year==1942|year==2016)
View(girl_names)
girl_names<-babynames%>%
+   group_by(year)%>% #create a group for each year
+   mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
+   filter(sex=="F", year==1896|year==1942|year==2016, 26<rank|rank<29)%>% #filter the rows for all female names and for the specified years
+ filter(25<rank&rank<30)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))
View(girl_names)
girl_names<-babynames%>%
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
filter((rank > 25) & (rank < 30))
View(flights3)
View(girl_names)
girl_names<-babynames%>%
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
View(girl_names)
girl_names<-babynames%>%
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter(sex=="F", year==1896|year==1942|year==2016)
View(girl_names)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2016)%>% #filter the rows for all female names and for the specified years
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter((rank > 25) & (rank < 30))
View(girl_names)
View(babynames)
girl_names<-babynames%>%
filter(sex=="F", year==1896|year==1942|year==2014)%>% #filter the rows for all female names and for the specified years
group_by(year)%>% #create a group for each year
mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks
filter((rank > 25) & (rank < 30))
View(girl_names)
install.packages("nasaweather")
library(nasaweather)
?nasaweather
nasaweather
nasaweather:atmos
head(nasaweather:atmos)
nasaweather::atmos
?nasaweather::atmos
?nasaweather
??nasaweather
nasaweather::atmos
nasaweather::elev
nasaweather::borders
nasaweather::storms
storms<-nasaweather::storms
View(storms)
storms<-nasaweather::storms%>%
filter(type=Hurricane)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(name)%>%
summarize(mean_speed=mean(wind))
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(name, month)%>%
summarize(mean_speed=mean(wind))
View(storms)
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(name, month)%>%
summarize(mean_speed=mean(wind))%>%
summarize(n=n()) #apply a count function to the groups
View(storms)
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(name, month)%>%
summarize(mean_speed=mean(wind))
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(name, month,year)%>%
summarize(mean_speed=mean(wind))
View(storms)
View(storms)
storm_plot<-ggplot(storms,aes(x=month, y=mean_speed))+geom_point()+ylab("Mean Hurricane Wind Speed")+facet_wrap(~year)
print(storm_plot)
View(storms)
View(EWR)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(name, month,year)%>%
summarize(mean_speed=mean(wind), n=n(name)) #apply a count function to the groups)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(name, month,year)%>%
summarize(mean_speed=mean(wind), n=n()) #apply a count function to the groups)
View(storms)
?n()
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(name, month,year)%>%
summarize(mean_speed=mean(wind), n=count(name)) #apply a count function to the groups)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(name, month,year)%>%
summarize(mean_speed=mean(wind), n=count("name"))
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(name, month,year)%>%
summarize(mean_speed=mean(wind))%>% #apply a count function to the groups)
summarize(n=n()) #apply a count function to the groups
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(name, month,year)%>%
summarize(mean_speed=mean(wind))%>% #apply a count function to the groups)
storms
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(name, month,year)%>%
summarize(mean_speed=mean(wind))
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
select(name,month, year, wind)%>%
group_by(name)%>%
summarize(mean_speed=mean(wind))
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
select(name,month, year, wind)%>%
group_by(name)
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
select(name,month, year, wind)%>%
group_by(name)%>%
summarize(n=n())
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
select(name,month, year, wind)%>%
group_by(name,month,year)%>%
summarize(n=n())
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
select(name,month, year, wind)%>%
group_by(name,month,year)%>%
summarize(n=n_distinct(name)%>% #apply a count function to the groups)
View(storms)
View(storms)
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
select(name,month, year, wind)%>%
group_by(name,month)%>%
summarize(n=n_distinct(name))
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
select(name,month, year, wind)%>%
group_by(name,month,year)%>%
summarize(n=n_distinct(month))
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
select(name,month, year, wind)%>%
group_by(month)%>%
summarize(n=n())
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
select(name,month, year, wind)%>%
group_by(month,name)%>%
summarize(n=n())
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(month,name,year)%>%
summarize(n=n())
View(storms)
storms<-nasaweather::storms%>%
filter(type=="Hurricane")%>% #only want hurricanes, not tropical storms
group_by(month,name,year)%>%
summarize(mean_speed=mean(wind)) #apply a count function to the groups)
storms
View(storms)
storm_plot<-ggplot(storms,aes(x=month, y=mean_speed, fill=year))+geom_point()+ylab("Mean Hurricane Wind Speed")+facet_wrap(~year)+
scale_fill_manual(values=wes_palette(n=3, name="Darjeeling"))
print(storm_plot)
storm_plot<-ggplot(storms,aes(x=month, y=mean_speed, fill=year))+geom_point()+ylab("Mean Hurricane Wind Speed")+facet_wrap(~year)+
scale_fill_manual(values=wes_palette(name="Darjeeling"))
print(storm_plot)
storm_plot<-ggplot(storms,aes(x=month, y=mean_speed, color=year))+geom_point()+ylab("Mean Hurricane Wind Speed")+facet_wrap(~year)
print(storm_plot)
storm_plot<-ggplot(storms,aes(x=month, y=mean_speed, color=year))+geom_point()+ylab("Mean Hurricane Wind Speed")+facet_wrap(~year)+
scale_fill_gradient(values=wes_palette(name="Darjeeling"))
print(storm_plot)
storm_plot<-ggplot(storms,aes(x=month, y=mean_speed, color=year))+
geom_point()+
ylab("Mean Hurricane Wind Speed")+facet_wrap(~year)+
legend_discrete(labels = abbreviate)+
scale_fill_gradient(values=wes_palette(name="Darjeeling"))
print(storm_plot)
storm_plot<-ggplot(storms,aes(x=month, y=mean_speed, group=factor(year), color=factor(year)))+
geom_point()+
ylab("Mean Hurricane Wind Speed")+facet_wrap(~year)+
legend_discrete(labels = abbreviate)+
scale_fill_gradient(values=wes_palette(name="Darjeeling"))
print(storm_plot)
storm_plot<-ggplot(storms,aes(x=month, y=mean_speed, group=factor(year), color=factor(year)))+
geom_point()+
ylab("Mean Hurricane Wind Speed")+facet_wrap(~year)
print(storm_plot)
storm_plot<-ggplot(storms,aes(x=month, y=mean_speed, group=factor(year), color=factor(year)))+
geom_point()+
ylab("Mean Hurricane Wind Speed")+facet_wrap(~year)+
scale_fill_gradient(values=wes_palette(name="Darjeeling"))
print(storm_plot)
storm_plot<-ggplot(storms,aes(x=month, y=mean_speed, group=factor(year), color=factor(year)))+
geom_point()+
ylab("Mean Hurricane Wind Speed")+facet_wrap(~year)+
scale_fill_manual(values=wes_palette(n=3, name="Darjeeling"))
print(storm_plot)
scale_fill_discrete()
storm_plot<-ggplot(storms,aes(x=month, y=mean_speed, group=factor(year), color=factor(year)))+
geom_point()+
ylab("Mean Hurricane Wind Speed")+facet_wrap(~year)+
scale_fill_discrete(values=wes_palette(n=3, name="Darjeeling"))
print(storm_plot)
