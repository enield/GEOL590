{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Task 7\"\nauthor: \"Emily Nield\"\ndate: \"February 24, 2017\"\noutput:\n  md_document: default\n    \n\n---\n\n##Prerequisites\n\nLoad in the tidyverse library:\n```{r}\nlibrary(tidyverse)\nlibrary(wesanderson) #fun colour package based on his films. \n```\n\nLoad in the data sets:\n```{r}\nlibrary(nycflights13)\nlibrary(babynames)\n```\n\n```{r opts}\nknitr::opts_chunk$set(\n  fig.path = \"images/\"\n)\n```\n\n##NYC Weather\n\n**Question 1: Determine whether there are any clear outliers in wind speed (wind_speed) that should be rejected. If so, filter those bad point(s) and proceed.**\n\nStart by specifying which data set you will be using.\n```{r}\nnycflights13::weather\n```\n\nWe are only interested in the wind speed and direction. Simplify the data set by removing the excess rows.\n\n```{r}\nwind <- nycflights13::weather %>%\n  select(origin, wind_dir, wind_speed)\nhead(wind)\n```\n\n\nVisualize the data to get a rough idea of any outliers present. Use a box plot.\n```{r}\nggplot(wind)+geom_boxplot(aes(x=origin,y=wind_speed))+ylab('Wind Speed')\n```\n\nWe can see that there is wind speed over 1000. Let's filter that point out.\n```{r}\nwind_filter <- wind %>%\n  filter(wind_speed<1000)\nhead (wind_filter)\n```\n\nPlot the filtered wind data to see if there are any more outliers.\n```{r}\nggplot(wind_filter)+geom_boxplot(aes(x=origin,y=wind_speed))+ylab('Wind Speed')\n```\n\nNow we have a more clear view with no more obvious outliers.\n\n\n\n\n**Question 2: What direction has the highest median speed at each airport? Make a table and a plot of median wind speed by direction, for each airport.**\n\nNeed to find the median wind speed for each direction, sorted by the three airports. Use the SPLIT-APPLY-COMBINE approach. SPLIT the data in two ways, airport and wind direction. APPLY the median function to the groups. COMBINE into a table showing 3 columns. \n\n\n```{r}\nmedian <- wind_filter %>%\n  group_by(origin, wind_dir) %>% #SPLIT into groups\n  summarize (\n    speed=median(wind_speed, na.rm=TRUE) #APPLY the median function to these groups\n  )\n #COMBINE is the output table of the median data frame \nmedian\n```\n\nNow we need to plot this data. \n\nPlot a basic graph\n```{r}\nbar <- ggplot(median, aes(x=wind_dir, y=speed, fill=origin)) + \n  facet_wrap(~origin)+geom_bar(stat = \"identity\")+\n  scale_fill_manual(values=wes_palette(n=3, name=\"Darjeeling\"))\nprint(bar)\n```\n\nNow plot as wind rose\n```{r}\nrose <- bar+coord_polar()\nprint(rose)\n```\n\n##NYC Flights and Airlines\n\n**Question 3: Make a table with two columns: airline name (not carrier code) and median distance flown from JFK airport. The table should be arranged in order of decreasing mean flight distance. **\n\nPreview the data\n```{r}\nnycflights13::flights\nnycflights13::airlines\n```\n\n\nNeed to find the key, the variable used to connect each pair of tables. In this case it is *carrier*. I will use a left join that will keep all observations in the flights data. \n```{r}\nflights2 <- nycflights13::flights %>% #define the data set you are using\n  left_join(nycflights13::airlines, by=\"carrier\") %>% #join the data frames using \"carrier\" as the key\n  filter(origin == \"JFK\") %>% #filter for planes that left JFK\n  arrange(desc(distance)) %>% #arrange in order of decreasing mean flight distance\n  select(name, distance)  #keep only these two columns\nhead (flights2) #preview new table, shhowing first 5 rows \n```\n\n**Question 4: Make a wide-format data frame that displays the number of flights that leave Newark (\"EWR\") airport each month, from each airline.**\n\nWill need to use the SPLIT-APPLY-COMBINE approach. SPLIT the flight data into groups based on airlines and month and filter to only use EWR data, APPLY the mean function to the data, COMBINE the data into a wide format table. Will need to use the spread() function as it makes long tables shorter and wider. \n\n```{r}\nEWR<- nycflights13::flights%>% #define the data set you are using\n  filter(origin == \"EWR\") %>% #filter for planes that left EWR\n  group_by(carrier, month) %>% #Split into groups based on month and carrier\n  summarize(n=n()) #apply a count function to the groups\nEWR #look at the table\n```\n\nThe output table is in long format, need to convert to wide format using months. Use the spread function. Months is the key. Specify that we want to split the count data, the \"n\" column.\n```{r}\nEWR_month<-spread(EWR,key=month, n)\nEWR_month\n```\n\n##Baby Names\n\n**Question 5: Identify the ten most common male and female names in 2014. Make a plot of their frequency (prop) since 1880. (This may require two separate piped statements).**\n\n\nStart by previewing the data\n```{r}\nhead(babynames)\n```\n\nFirst determine top 10 baby names in 2014:\n```{r}\ntop10 <- babynames %>%\n  filter(year==2014)%>% #isolate baby names from 2014\n  group_by(sex)%>% #group by sex to get top 10 in this format\n  top_n(10,n) %>%#select the top 10 values in the count colmn, n\n  rename(sex2 = sex)%>% #renamind sex column becuase it will make it easier to join in next step\n select(name,sex2)  #only intrested in the name and sex, will keep only one col, it will make it easier for the next step below\n```\n\n\nI know have a data frame of top 10 names. I can merge it with the babynames data frame using a left join with top 10 as the primary data frame. This will ensure that only the names that appear in the top ten will be preserved.  Need to eliminate the prop column.\n```{r}\ntop10_all<-top10%>%\n  left_join(babynames, by=\"name\", na.rm=TRUE)\ntop10_all\n```\n\nApparently people gave traditionally female names to males in some years and I will need to filter these out. Will apply a conditional filter so that I can remove rows where sex2 does not equal sex.\n\n```{r}\ntop10_mf<-top10%>%\n  left_join(babynames, by=\"name\")%>%\n  filter(sex2==sex)\n```\n\n\nNow that we have our data set lets plot!\n```{r}\nname_plot<-ggplot(top10_mf, aes(x=year,y=n, colour=sex))+geom_point()+ylab(\"Frequency of Names\")+facet_wrap(~name)\nprint(name_plot)\n```\n\n**Question 6: Make a single table of the 26th through 29th most common girls names in the year 1896, 1942, and 2016**\n\n```{r}\ngirl_names<-babynames%>%\n  filter(sex==\"F\", year==1896|year==1942|year==2014)%>% #filter the rows for all female names and for the specified years\n  group_by(year)%>% #create a group for each year\n  mutate(rank = dense_rank(desc(n)))%>%#add a column that assigns a rank to the count column, used dense so that there is no gaps between ranks\nfilter((rank > 25) & (rank < 30)) #filter again so that only the rank 26, 27, 28, 29 are displayed\ngirl_names\n```\n\n##Weather Data\n\n**Question 7: Write task that involves some of the functions on the Data Wrangling Cheat Sheet and execute it.* You may either use your own data or data packages (e.g., the ones listed here).**\n\n\nLoad in the NASA Weather data\n```{r}\nlibrary(nasaweather)\n```\n\nThis package contains four datasets:\n\natmos: atmospheric measurements\nelev: elevations\nborders: borders of countries in the region\nstorms: tracks of tropical storms\n\nWe will work the storm dataset:\n```{r}\nnasaweather::storms\n```\n\nI like the hurricane dataset the best. Let's see what month has the most powerful (based on wind speed) hurricanes between 1995 and 2000. \n\n```{r}\nstorms<-nasaweather::storms%>%\n  filter(type==\"Hurricane\")%>% #only want hurricanes, not tropical storms\n  group_by(month,name,year)%>%\n  summarize(mean_speed=mean(wind)) #apply a count function to the groups)\nstorms\n```\n\n\nPlot the data:\n```{r}\nstorm_plot<-ggplot(storms,aes(x=month, y=mean_speed, group=factor(year), color=factor(year)))+\n  geom_point()+\n  ylab(\"Mean Hurricane Wind Speed\")+facet_wrap(~year)\nprint(storm_plot)\n```\n\n\n\n",
    "created" : 1487973258423.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1804256114",
    "id" : "D396399",
    "lastKnownWriteTime" : 1488058397,
    "last_content_update" : 1488058397180,
    "path" : "D:/emily/Documents/Graduate Courses/R Class with Drew/Tasks/Task 7/Task 7.Rmd",
    "project_path" : "Task 7.Rmd",
    "properties" : {
        "ignored_words" : "tidyverse,babynames\n",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}